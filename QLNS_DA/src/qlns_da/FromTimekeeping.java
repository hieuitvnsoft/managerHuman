/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package qlns_da;

import Entity.Department;
import Entity.Timekeeping;
import Mannager.MannagerTimekeeping;
import Mannager.MannagerTimekeeping.edTimekeep;
import Mannager.MannagergetData;
import Mannager.MannagergetData.TimeKeep;
import java.awt.Dimension;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author AnhHieu
 */
public class FromTimekeeping extends javax.swing.JInternalFrame {

    DefaultTableModel model = new DefaultTableModel();
    DefaultComboBoxModel dcbm;

    /**
     * Creates new form FromTimekeepingc
     */
    public FromTimekeeping() {
        initComponents();

//        txtDate.getDateEditor().addPropertyChangeListener(
//    new PropertyChangeListener() {
//        @Override
//        public void propertyChange(PropertyChangeEvent e) {
//            if ("date".equals(e.getPropertyName())) {
//                System.out.println(e.getPropertyName()
//                    + ": " + (Date) e.getNewValue());
//            }
//        }
//    });
//        
        model.addColumn("Mã nhân viên");
        model.addColumn("Tên nhân viên");
        model.addColumn("Phòng ban");
        model.addColumn("Chức vụ");
        model.addColumn("Đi làm");
        model.addColumn("Chú thích");

        validateForm();
        try {

            loadDepart();
            loadEmp();
        } catch (SQLException ex) {
            Logger.getLogger(FromTimekeeping.class.getName()).log(Level.SEVERE, null, ex);
        }
        tblTimekeeping.setModel(model);
        tblTimekeeping.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(chkWork));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void loadDepart() throws SQLException {
        MannagergetData mnd = new MannagergetData();
        Vector<Department> lst = mnd.getDepart();
        dcbm = new DefaultComboBoxModel<>(lst);
        cboDep.setModel(dcbm);
    }

    private void loadEmp() throws SQLException {
        Department dp = (Department) cboDep.getItemAt(0);
        String n = dp.getId();
        MannagergetData mnd = new MannagergetData();
        Vector<TimeKeep> lst = mnd.getEmpTimekeeping(n);
        for (int i = 0; i < lst.size(); i++) {
            Vector<String> row = new Vector<>();
            TimeKeep elementAt = lst.elementAt(i);
            row.add(elementAt.getId());
            row.add(elementAt.getName());
            row.add(elementAt.getDep());
            row.add(elementAt.getPos());
            model.addRow(row);
        }

    }

    private void validateForm() {
        Calendar now = Calendar.getInstance();
        txtDate.setDate(now.getTime());
        txtDate.getJCalendar().setPreferredSize(new Dimension(320, 250));
    }


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboStatus = new javax.swing.JComboBox<>();
        cboWork = new javax.swing.JComboBox<>();
        cboWorkBr = new javax.swing.JComboBox<>();
        chkWork = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTimekeeping = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cboDep = new javax.swing.JComboBox();
        txtDate = new com.toedter.calendar.JDateChooser();
        btnAdd = new javax.swing.JButton();

        cboStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Đi làm", "Nghỉ" }));

        cboWork.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Đi đúng giờ", "Đi muộn dưới 15p", "Đi muộn hơn 15 p" }));

        cboWorkBr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nghỉ có phép", "Nghỉ không phép" }));

        chkWork.setSelected(true);
        chkWork.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/if_idea_job_seeker_employee_unemployee_work_2620517.png"))); // NOI18N

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Chấm công nhân viên");

        tblTimekeeping.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblTimekeeping.getTableHeader().setReorderingAllowed(false);
        tblTimekeeping.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTimekeepingMouseClicked(evt);
            }
        });
        tblTimekeeping.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                tblTimekeepingCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tblTimekeepingInputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tblTimekeeping);

        jLabel1.setText("Ngày chấm công:");

        jLabel2.setText("Phòng ban:");

        cboDep.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboDepItemStateChanged(evt);
            }
        });
        cboDep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDepActionPerformed(evt);
            }
        });

        txtDate.setDateFormatString("yyyy-MM-dd");
        txtDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtDatePropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtDate, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(cboDep, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboDep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAdd.setText("Chấm công");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAdd)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblTimekeepingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTimekeepingMouseClicked

    }//GEN-LAST:event_tblTimekeepingMouseClicked

    private void cboDepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDepActionPerformed
        Date now = new Date();
        Date edit = txtDate.getDate();
        if (now.getDate() - edit.getDate() > 3) {
            JOptionPane.showMessageDialog(null, "Bạn không được sửa");
        }
    }//GEN-LAST:event_cboDepActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        Date edit = txtDate.getDate();
        Date now = new Date();
        long dayBetween = now.getTime() - edit.getTime();
        long diffDay = dayBetween / (24 * 60 * 60 * 1000);
        System.out.println(diffDay);
        if (diffDay < 1) {
            try {
                int rows = tblTimekeeping.getRowCount();
                Vector<Timekeeping> ls = new Vector<>();
                for (int i = 0; i < rows; i++) {
                    Timekeeping tkp = new Timekeeping();
                    tkp.setId((String) tblTimekeeping.getValueAt(i, 0));
                    tkp.setDate(txtDate.getDate());
                    Boolean off = (Boolean) tblTimekeeping.getValueAt(i, 4);
                    System.out.println(off);
                    String id = (String) tblTimekeeping.getValueAt(i, 0);
                    System.out.println(id);
                    if (off == false) {
                        MannagerTimekeeping mntkp = new MannagerTimekeeping();
                        int z = mntkp.checkDateoff(id);
                        System.out.println(z);
                        if (z > 0) {

                            z--;
                            tkp.setStt(true);
                            mntkp.updateDateoffEmp(z, id);

                        } else if (z == 0) {
                            tkp.setStt(false);
                        }
                    } else {
                        tkp.setStt(true);
                    }
                    tkp.setNote((String) tblTimekeeping.getValueAt(i, 5));
                    ls.add(tkp);

                }
                Mannager.MannagerTimekeeping mntkp = new MannagerTimekeeping();
                mntkp.insertTimekeep(ls);
                JOptionPane.showMessageDialog(null, "Điểm danh thành công", "Thông báo", HEIGHT);

            } catch (SQLException ex) {
                Logger.getLogger(FromTimekeeping.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (diffDay > 1 && diffDay < 3) {
            ImageIcon kx = new ImageIcon("src/image/yn.png");
            int x = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn sửa", "Thông báo", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, kx);
            if (x == 1) {
                try {
                    int rows = tblTimekeeping.getRowCount();
                    Vector<Timekeeping> ls = new Vector<>();
                    for (int i = 0; i < rows; i++) {
                        Timekeeping tkp = new Timekeeping();
                        tkp.setId((String) tblTimekeeping.getValueAt(i, 0));
                        tkp.setDate(txtDate.getDate());
                        Boolean off = (Boolean) tblTimekeeping.getValueAt(i, 4);
                        System.out.println(off);
                        String id = (String) tblTimekeeping.getValueAt(i, 0);
                        if (off == false) {
                            MannagerTimekeeping mntkp = new MannagerTimekeeping();
                            int z = mntkp.checkDateoff(id);
                            System.out.println(z);
                            if (z > 0) {

                                z--;
                                tkp.setStt(true);
                                mntkp.updateDateoffEmp(z, id);

                            } else if (z == 0) {
                                tkp.setStt(false);
                            }
                        }
                        tkp.setNote((String) tblTimekeeping.getValueAt(i, 5));
                        ls.add(tkp);

                    }
                    Mannager.MannagerTimekeeping mntkp = new MannagerTimekeeping();
                    mntkp.updateTimekeep(ls);
                    JOptionPane.showMessageDialog(null, "Điểm danh thành công", "Thông báo", HEIGHT);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Đã điểm danh rồi");
                    System.out.println(ex);
                }
            }
        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void cboDepItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboDepItemStateChanged
        try {

            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            Department dp = (Department) cboDep.getSelectedItem();
            String n = dp.getId();
            MannagergetData mnd = new MannagergetData();
            Vector<TimeKeep> lst = mnd.getEmpTimekeeping(n);
            for (int i = 0; i < lst.size(); i++) {
                Vector<String> row = new Vector<>();
                TimeKeep elementAt = lst.elementAt(i);
                row.add(elementAt.getId());
                row.add(elementAt.getName());
                row.add(elementAt.getDep());
                row.add(elementAt.getPos());
                model.addRow(row);

            }
        } catch (SQLException ex) {
            Logger.getLogger(FromTimekeeping.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cboDepItemStateChanged

    private void tblTimekeepingCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tblTimekeepingCaretPositionChanged

    }//GEN-LAST:event_tblTimekeepingCaretPositionChanged

    private void tblTimekeepingInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tblTimekeepingInputMethodTextChanged

    }//GEN-LAST:event_tblTimekeepingInputMethodTextChanged

    private void txtDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtDatePropertyChange
        ImageIcon img = new ImageIcon("src/image/k.png");
        Date now = new Date();
        Date edit = txtDate.getDate();
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        String dateex = df.format(edit);
        System.out.println(dateex);

        long dayBetween = now.getTime() - edit.getTime();

        long diffDay = dayBetween / (24 * 60 * 60 * 1000);
        System.out.println("Khoảng cách: " + diffDay);
        if (diffDay > 3 || diffDay < 0) {
            JOptionPane.showMessageDialog(null, "Bạn không được sửa những ngày này", "Thông báo", JOptionPane.WARNING_MESSAGE, img);
            txtDate.setDate(now);
        } else if (0 < diffDay && diffDay < 3) {

            btnAdd.setText("Sửa chấm công");

            try {
                int j = tblTimekeeping.getRowCount();
                while (model.getRowCount() > 0) {
                    model.removeRow(0);
                }
                Department dp = (Department) cboDep.getItemAt(0);
                String n = dp.getId();

                MannagerTimekeeping mntkp = new MannagerTimekeeping();
                Vector<edTimekeep> ls = new Vector<>();
                ls = mntkp.editTimekeep(n, dateex);
                for (int i = 0; i < ls.size(); i++) {
                    edTimekeep elementAt = ls.elementAt(i);
                    Vector jj = new Vector();
                    String id = elementAt.getId();
                    String name = elementAt.getName();
                    String pb = elementAt.getPb();
                    String cv = elementAt.getCv();
                    Boolean stt = elementAt.isStt();
                    String note = elementAt.getNote();
                    jj.add(id);
                    jj.add(name);
                    jj.add(pb);
                    jj.add(cv);
                    jj.add(stt);
                    jj.add(note);
                    model.addRow(jj);
                }

            } catch (SQLException ex) {
                Logger.getLogger(FromTimekeeping.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_txtDatePropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JComboBox cboDep;
    private javax.swing.JComboBox<String> cboStatus;
    private javax.swing.JComboBox<String> cboWork;
    private javax.swing.JComboBox<String> cboWorkBr;
    private javax.swing.JCheckBox chkWork;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTimekeeping;
    private com.toedter.calendar.JDateChooser txtDate;
    // End of variables declaration//GEN-END:variables
}
